addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request))
})

async function handleRequest(request) {
  try {
    const url = new URL(request.url)
    url.hostname = 'theblackxyz-bots.onrender.com'

    // Clone the request to avoid body consumption issues
    const newRequest = new Request(url, {
      method: request.method,
      headers: request.headers,
      body: request.method === 'POST' ? await request.clone().text() : null,
      redirect: 'follow',
    })

    // Fetch the resource with streaming enabled
    const response = await fetch(newRequest, {
      compress: true,  // Enable compression (if applicable)
      redirect: 'follow', // Follow redirects for large files
      cache: 'no-store',  // Disable caching for real-time fetching
    })

    // Stream the response back to the client
    const { readable, writable } = new TransformStream()
    response.body.pipeTo(writable)

    return new Response(readable, {
      headers: response.headers, // Retain original response headers
      status: response.status,
      statusText: response.statusText,
    })
  } catch (error) {
    return new Response('Error handling the request: ' + error.message, { status: 500 })
  }
}
